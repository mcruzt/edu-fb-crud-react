{"version":3,"sources":["firebase.js","components/LinkForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LinkForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","validURL","match","useEffect","currentId","className","onSubmit","preventDefault","addOrEditLink","toast","type","autoClose","placeholder","onChange","rows","Links","links","setLinks","setCurrentId","linkObject","set","update","console","log","getLinks","onSnapshot","querySnapshot","docs","forEach","push","onDeleteLink","window","confirm","delete","map","link","key","onClick","href","rel","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39a9c8fd.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDK5qfS1RA8nbIjYwqW8bASYDkKocANCJ0\",\n    authDomain: \"fb-crud-react-2a12b.firebaseapp.com\",\n    databaseURL: \"https://fb-crud-react-2a12b.firebaseio.com\",\n    projectId: \"fb-crud-react-2a12b\",\n    storageBucket: \"fb-crud-react-2a12b.appspot.com\",\n    messagingSenderId: \"296081807616\",\n    appId: \"1:296081807616:web:4eed9c1b93d793b1ac3be5\"\n};\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\nexport const db = fb.firestore();\n","import React, {useState, useEffect} from \"react\";\nimport {db} from \"../firebase\";\nimport {toast} from \"react-toastify\";\n\n\nconst LinkForm = (props) => {\n    const initialStateValues = {\n        url: '',\n        name: '',\n        description: ''\n    };\n\n    const [values, setValues] = useState(initialStateValues);\n    const handleInputChange = e => {\n        const {name, value} = e.target;\n        setValues({...values, [name]: value});\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(validURL(values.url)) {\n            props.addOrEditLink(values);\n            setValues({...initialStateValues});\n        }else{\n            toast('invalid URL ',{type:'info',autoClose:1000});\n        }\n    }\n    const getLinkById = async (id) => {\n        const doc =  await db.collection('links').doc(id).get();\n        setValues({...doc.data()});\n    }\n\n    const validURL = url =>{\n        var res = url.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/g);\n        if(res == null)\n            return (false );\n        else\n            return (true);\n    }\n\n    useEffect(() => {\n        if (props.currentId === '') {\n             setValues({...initialStateValues});\n        }else{\n            getLinkById(props.currentId);\n        }\n    },[props.currentId])\n    return (\n        <div className='container'>\n        <form className='card card-body' onSubmit={handleSubmit}>\n            <div className='form-group input-group'>\n                <div className='input-group-text bg-light'>\n                    <i className=\"material-icons\">insert_link</i>\n                </div>\n                <input type='text' className='form-control' placeholder='URL' name='url' onChange={handleInputChange}\n                       value={values.url}/>\n            </div>\n            <div className='form-group input-group'>\n                <div className='input-group-text bg-light'>\n                    <i className=\"material-icons\">create</i>\n                </div>\n                <input type='text' className='form-control' placeholder='Website name' name='name'\n                       onChange={handleInputChange} value={values.name}/>\n            </div>\n            <div className='form-group'>\n                <textarea rows=\"3\" className='form-control' placeholder='Write a description' name='description'\n                          onChange={handleInputChange} value={values.description}></textarea>\n            </div>\n            <button className=\"btn btn-primary btn-block\">\n                {props.currentId === '' ? 'save': 'update'}\n            </button>\n        </form>\n        </div>\n    )\n}\n\nexport default LinkForm;\n","import React, {useEffect, useState} from \"react\";\nimport LinkForm from \"./LinkForm\";\nimport {db} from '../firebase';\nimport {toast} from \"react-toastify\";\n\nconst Links = () => {\n\n    const [links, setLinks] = useState([]);\n    const [currentId,setCurrentId] = useState('');\n\n    const addOrEditLink = async (linkObject) => {\n        try {\n            if (currentId === '') {\n                await db.collection('links').doc().set(linkObject);\n                toast('New link add', {type: 'success'});\n\n            } else {\n                db.collection('links').doc(currentId).update(linkObject);\n                toast('link update', {type: 'info'});\n                setCurrentId('');\n            }\n        }catch (error){\n            console.log(error);\n        }\n    }\n\n    const getLinks = async () => {\n        await db.collection('links').onSnapshot((querySnapshot) => {\n            const docs = [];\n            querySnapshot.forEach((doc) => {\n                docs.push({...doc.data(), id: doc.id});\n            });\n            setLinks(docs);\n        });\n\n    }\n\n    const onDeleteLink = async (id) => {\n        if (window.confirm('Delete link?')) {\n           await db.collection('links').doc(id).delete();\n            toast('deleted link',{type:'error',autoClose:2000});\n        }\n    }\n\n    useEffect(() => {\n        getLinks();\n    }, [])\n    return <div  className=\"container justify-content-md-center\">\n        <div className=\"container col-md-4\">\n            <LinkForm{ ...{addOrEditLink,currentId,links}}/>\n        </div>\n        <div className=\"col-md-8 p-2\"></div>\n        {links.map(link => (\n            <div className=\"card mb-1\" key={link.id}>\n                <div className=\"card-body\">\n                    <div className=\"d-flex justify-content-between\">\n                        <h4>{link.name}</h4>\n                        <div>\n                            <i className=\"material-icons\" onClick={() => onDeleteLink(link.id)}>close</i>\n                            <i className=\"material-icons\" onClick={() => setCurrentId(link.id)}>create</i></div>\n                    </div>\n                    <p>{link.description}</p>\n                    <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\"> Go to site</a>\n                </div>\n            </div>\n        ))}\n    </div>\n}\n\nexport default Links;\n","import React from 'react';\nimport './App.css';\nimport Links from \"./components/Links\";\nimport {ToastContainer}  from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n      <div className='container p-4'>\n          <div className='row'>\n              <Links/>\n          </div>\n          <ToastContainer/>\n      </div>\n\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './firebase';\nimport 'bootswatch/dist/sketchy/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}